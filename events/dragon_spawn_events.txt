namespace = dragon_spawn

dragon_spawn.0005 = {
	type = character_event
	title = dragon_spawn.0005.t
	desc = dragon_spawn.0005.desc

	option = {
		name = dragon_spawn.0005.a
		add_prestige = -150
	}
}

# Spawn Dragon & Allow Custom Name
dragon_spawn.0006 = {
	type = character_event
	title = dragon_spawn.0006.t
	desc = dragon_spawn.0006.desc

	theme = pet
	override_background = {
		event_background = courtyard
	}

	left_portrait = {
		character = root
		animation = personality_cynical
	}

	artifact = { # To display the artifact in the event-window
		target = scope:newly_created_artifact
		position = lower_center_portrait
	}

	immediate = {
		# random_memory = {
		# 	limit = { has_memory_type = dragon_tamed }
		# 	save_scope_as = dragon_tamed_memory
		# }
		play_music_cue = "mx_cue_low_key_positive"
		create_character_memory = {
			type = dragon_tamed
		}
		# if = {
		# 	limit = { exists = scope:bday_memory.var:bday_artifact_gift }
		# 	scope:bday_memory.var:bday_artifact_gift = { save_scope_as = old_bday_gift }
		# }
        # save_scope_as = root_char
	}

	#DRAGON NAMING WIDGET
	# widgets = {
    #     # widget = {
    #     #     gui = "custom_loc_widget"  
    #     #     container = "customizable_localization_custom_loc"
    #     #     controller = {
    #     #         type = text
    #     #         data = {
    #     #             variable = custom_loc_var # This is the var that's gonna be referenced through localization
    #     #             default = "Dragon"
    #     #         }  
    #     #     }
    #     #     setup_scope = {
    #     #         root = { save_scope_as = text_target }
    #     #     }
    #     # }
    #     widget = {
    #         gui = "event_window_widget_enter_text"  
    #         container = "dynamic_birth_name"
    #         controller = {
    #             type = text
    #             data = {
    #                 variable = custom_loc_var # This is the var that's gonna be referenced through localization
    #                 default = "Dragon"
    #             }  
    #         }
    #         setup_scope = {
    #             root = { save_scope_as = text_target }
    #         }
    #     }
    # }

	option = {
		name = dragon_spawn.0006.a
		add_prestige = 500

		random_list = {
			30 = {
				create_artifact_fire_dragon_effect = {
					OWNER = root
					# DRAGON_NAME = scope:name_character_target
				}
				save_scope_value_as = {
					name = dragon
					value = yes
				}
				if = {
					limit = {
						exists = scope:newly_created_artifact
					}
					send_interface_toast = {
						title = dragon_spawn.0006.t.tamed_dragon
						left_icon = scope:newly_created_artifact
						show_as_tooltip = {
							scope:newly_created_artifact = {
								set_owner = root
							}
						}
					}
				}
			}
			30 = {
				create_artifact_water_dragon_effect = {
					OWNER = root
					# DRAGON_NAME = dragon_name
					# DRAGON_NAME = scope:name_character_target
				}
				save_scope_value_as = {
					name = dragon
					value = yes
				}
				if = {
					limit = {
						exists = scope:newly_created_artifact
					}
					send_interface_toast = {
						title = dragon_spawn.0006.t.tamed_dragon
						left_icon = scope:newly_created_artifact
						show_as_tooltip = {
							scope:newly_created_artifact = {
								set_owner = root
							}
						}
					}
				}
			}
			30 = {
				create_artifact_stone_dragon_effect = {
					OWNER = root
					# DRAGON_NAME = scope:name_character_target
				}
				save_scope_value_as = {
					name = dragon
					value = yes
				}
				if = {
					limit = {
						exists = scope:newly_created_artifact
					}
					send_interface_toast = {
						title = dragon_spawn.0006.t.tamed_dragon
						left_icon = scope:newly_created_artifact
						show_as_tooltip = {
							scope:newly_created_artifact = {
								set_owner = root
							}
						}
					}
				}
			}
		}
	}

	after = {
		# Save the scoped artifact as a variable on the memory to access later
		random_memory = {
			limit = { has_memory_type = dragon_tamed }
			set_variable = {
				name = dragon_artifact_tamed
				value = scope:newly_created_artifact
			}
		}
	}
}

# Spawn Dragon Egg
dragon_spawn.0007 = {
	type = empty
	hidden = yes

	immediate = {
		random_list = {
			30 = {
				set_variable = { name = dragon_type value = flag:fire }
			}
			30 = {
				set_variable = { name = dragon_type value = flag:water }
			}
			30 = {
				set_variable = { name = dragon_type value = flag:stone }
			}
		}
		create_artifact_dragon_egg_effect = { OWNER = this }
		send_interface_toast = {
			title = dragon_spawn.0007.t.found_dragon_egg
			left_icon = scope:newly_created_artifact
			show_as_tooltip = {
				scope:newly_created_artifact = {
					set_owner = root
				}
			}
		}
	}
}

# Dragon Egg Hatches - Spawn Baby Dragon
dragon_spawn.0008 = {
	type = character_event
	title = dragon_spawn.0008.t
	desc = dragon_spawn.0008.desc
	theme = pet

	override_background = {
		event_background = courtyard
	}

	left_portrait = {
		character = root
		animation = personality_cynical
	}

	artifact = { # To display the artifact in the event-window
		target = scope:newly_created_artifact
		position = lower_right_portrait
	}

	
	# #NAMING WIDGET
	# widgets = {
	# 	widget = {
	# 		is_shown = {
	# 			allow_naming_on_birth_of_child_trigger = { CHILD = scope:child }
	# 		}
	# 		gui = "event_window_widget_name_child"
	# 		container = "dynamic_birth_name"
	# 		controller = name_character
	# 		setup_scope = {
	# 			scope:child = { save_scope_as = name_character_target }
	# 		}
	# 	}
	# }

	option = {
		name = dragon_spawn.0008.a
		add_prestige = 200
	}

	immediate = {
		scope:dragon_egg_artifact = {
			if = {
				limit = {
					has_artifact_feature = dragon_element_fire
				}
				set_variable = { name = dragon_type value = flag:fire }
			}
			else_if = {
				limit = {
					has_artifact_feature = dragon_element_water
				}
				set_variable = { name = dragon_type value = flag:water }
			}
			else_if = {
				limit = {
					has_artifact_feature = dragon_element_stone
				}
				set_variable = { name = dragon_type value = flag:stone }
			}
		}
		create_artifact_baby_dragon_effect = { OWNER = this }
		destroy_artifact = scope:dragon_egg_artifact
	}
}